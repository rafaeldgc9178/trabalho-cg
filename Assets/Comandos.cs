//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Comandos.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Comandos: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Comandos()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Comandos"",
    ""maps"": [
        {
            ""name"": ""Joystick"",
            ""id"": ""028e650f-d4ad-4433-9e88-df05903eab47"",
            ""actions"": [
                {
                    ""name"": ""Caminhar"",
                    ""type"": ""Button"",
                    ""id"": ""c0b1515c-15e7-47af-8453-cf613872b872"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interagir"",
                    ""type"": ""Button"",
                    ""id"": ""f800a0c2-6134-4ab0-9a6a-330b19610362"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8371e59e-a809-4e19-b388-8fa95db82347"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Caminhar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdd90c75-dbe5-4f10-b7a5-bc2b22a88b29"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interagir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Joystick
        m_Joystick = asset.FindActionMap("Joystick", throwIfNotFound: true);
        m_Joystick_Caminhar = m_Joystick.FindAction("Caminhar", throwIfNotFound: true);
        m_Joystick_Interagir = m_Joystick.FindAction("Interagir", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Joystick
    private readonly InputActionMap m_Joystick;
    private List<IJoystickActions> m_JoystickActionsCallbackInterfaces = new List<IJoystickActions>();
    private readonly InputAction m_Joystick_Caminhar;
    private readonly InputAction m_Joystick_Interagir;
    public struct JoystickActions
    {
        private @Comandos m_Wrapper;
        public JoystickActions(@Comandos wrapper) { m_Wrapper = wrapper; }
        public InputAction @Caminhar => m_Wrapper.m_Joystick_Caminhar;
        public InputAction @Interagir => m_Wrapper.m_Joystick_Interagir;
        public InputActionMap Get() { return m_Wrapper.m_Joystick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JoystickActions set) { return set.Get(); }
        public void AddCallbacks(IJoystickActions instance)
        {
            if (instance == null || m_Wrapper.m_JoystickActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JoystickActionsCallbackInterfaces.Add(instance);
            @Caminhar.started += instance.OnCaminhar;
            @Caminhar.performed += instance.OnCaminhar;
            @Caminhar.canceled += instance.OnCaminhar;
            @Interagir.started += instance.OnInteragir;
            @Interagir.performed += instance.OnInteragir;
            @Interagir.canceled += instance.OnInteragir;
        }

        private void UnregisterCallbacks(IJoystickActions instance)
        {
            @Caminhar.started -= instance.OnCaminhar;
            @Caminhar.performed -= instance.OnCaminhar;
            @Caminhar.canceled -= instance.OnCaminhar;
            @Interagir.started -= instance.OnInteragir;
            @Interagir.performed -= instance.OnInteragir;
            @Interagir.canceled -= instance.OnInteragir;
        }

        public void RemoveCallbacks(IJoystickActions instance)
        {
            if (m_Wrapper.m_JoystickActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJoystickActions instance)
        {
            foreach (var item in m_Wrapper.m_JoystickActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JoystickActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JoystickActions @Joystick => new JoystickActions(this);
    public interface IJoystickActions
    {
        void OnCaminhar(InputAction.CallbackContext context);
        void OnInteragir(InputAction.CallbackContext context);
    }
}
